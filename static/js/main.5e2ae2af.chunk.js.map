{"version":3,"sources":["contex.js","components/TodoItem.js","components/TodoList.js","components/Loader.js","components/App.js","serviceWorker.js","index.js"],"names":["Contex","React","createContext","TodoItem","todo","index","completeTask","contex","useContext","classes","completed","push","className","type","checked","onChange","id","join","title","onClick","removeTodo","TodoList","props","todos","map","key","Panel","lazy","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","setTimeout","Provider","value","filter","Suspense","fallback","onCreate","unshift","length","concat","reorder","console","log","Loader","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQAIeA,G,KAFAC,IAAMC,iBC2BNC,MAzBf,YAAkD,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,aACzBC,EAASC,qBAAWR,GACpBS,EAAU,CAAC,cAKjB,OAJuB,IAAnBL,EAAKM,WACPD,EAAQE,KAAK,QAIb,wBAAIC,UAAU,aACZ,yBAAKA,UAAU,gBACb,2BAAOC,KAAK,WAAWC,QAASV,EAAKM,UAAWK,SAAU,kBAAMT,EAAaF,EAAKY,OAClF,0BAAMJ,UAAU,WAAWP,EAAQ,GACnC,0BAAMO,UAAWH,EAAQQ,KAAK,MAAOb,EAAKc,QAE5C,4BAAQC,QAAS,kBAAMZ,EAAOa,WAAWhB,EAAKY,SCErCK,MAhBf,SAAkBC,GAChB,OACE,wBAAIV,UAAU,aACXU,EAAMC,MAAMC,KAAI,SAACpB,EAAMC,GACtB,OAAO,kBAAC,EAAD,CAAUD,KAAMA,EAAMC,MAAOA,EAClCC,aAAcgB,EAAMhB,aAAcmB,IAAKrB,EAAKY,UCPvC,oBAAM,yBAAKJ,UAAU,mBCK9Bc,EAAQzB,IAAM0B,MAAK,kBAAM,gCAiEhBC,MA/Df,WAAgB,IAAD,EACa3B,IAAM4B,SAAS,IAD5B,mBACNN,EADM,KACCO,EADD,OAEiB7B,IAAM4B,UAAS,GAFhC,mBAENE,EAFM,KAEGC,EAFH,KAiDb,OA5CAC,qBAAU,WACRC,MAAM,wDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAZ,GACJe,YAAW,WACTR,EAASP,GACTS,GAAW,KACV,WAEN,IAoCD,kBAAC,EAAOO,SAAR,CAAiBC,MAAO,CAAEpB,WAvB5B,SAAoBJ,GAClBc,EAASP,EAAMkB,QAAO,SAAArC,GAAI,OAAIA,EAAKY,KAAOA,SAuBxC,yBAAKJ,UAAU,WACb,wCACA,kBAAC,IAAM8B,SAAP,CAAgBC,SAAU,0CACxB,kBAACjB,EAAD,CAAOkB,SAvBf,SAAiB1B,GACfK,EAAMsB,QACJ,CACE7B,GAAIO,EAAMuB,OAAS,EACnBpC,WAAW,EACXQ,MAAOA,IAGXY,EAASP,EAAMwB,WAeiBC,QAZlC,WACEC,QAAQC,IAAI3B,GACZO,EAASP,EACNkB,QAAO,SAAArC,GAAI,OAAKA,EAAKM,aACrBqC,OAAOxB,EAAMkB,QAAO,SAAArC,GAAI,OAAIA,EAAKM,mBAU/BqB,EAAU,kBAACoB,EAAD,MAAa5B,EAAMuB,OAC3B,kBAAC,EAAD,CAAUvB,MAAOA,EAAOjB,aAzCjC,SAAsBU,GACpBc,EACEP,EAAMC,KAAI,SAAApB,GAIR,OAHIA,EAAKY,KAAOA,IACdZ,EAAKM,WAAaN,EAAKM,WAElBN,SAmCuD,2CCtDlDgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.5e2ae2af.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Contex = React.createContext();\r\n\r\nexport default Contex;","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Contex from '../contex';\r\n\r\nfunction TodoItem({ todo, index, completeTask }) {\r\n  const contex = useContext(Contex);\r\n  const classes = ['todo-title'];\r\n  if (todo.completed === true) {\r\n    classes.push('done')\r\n  }\r\n\r\n  return (\r\n    <li className=\"todo-item\">\r\n      <div className=\"data-wrapper\">\r\n        <input type=\"checkbox\" checked={todo.completed} onChange={() => completeTask(todo.id)} />\r\n        <span className=\"todo-id\">{index + 1}</span>\r\n        <span className={classes.join(' ')}>{todo.title}</span>\r\n      </div>\r\n      <button onClick={() => contex.removeTodo(todo.id)}></button>\r\n    </li>\r\n  )\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  index: PropTypes.number,\r\n  completeTask: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TodoItem from './TodoItem';\r\n\r\nfunction TodoList(props) {\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {props.todos.map((todo, index) => {\r\n        return <TodoItem todo={todo} index={index} \r\n          completeTask={props.completeTask} key={todo.id} />\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  completeTask: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\n\r\nexport default () => <div className=\"lds-dual-ring\" />","import React, { useEffect } from 'react';\nimport '../css/App.css';\nimport TodoList from './TodoList';\nimport Contex from '../contex';\nimport Loader from './Loader';\n\n\nconst Panel = React.lazy(() => import('./Panel'));\n\nfunction App() {\n  const [todos, setTodos] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n\n  //когда DOM деревого готово, тогда выполняется код этой функции\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(response => response.json())\n      .then(todos => {\n        setTimeout(() => {\n          setTodos(todos);\n          setLoading(false);\n        }, 1500)\n      })\n  }, [])\n\n  function completeTask(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo\n      })\n    )\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function addTodo(title) {\n    todos.unshift(\n      {\n        id: todos.length + 1,\n        completed: false,\n        title: title\n      }\n    );\n    setTodos(todos.concat());\n  }\n\n  function reorder() {\n    console.log(todos);\n    setTodos(todos\n      .filter(todo => !todo.completed)\n      .concat(todos.filter(todo => todo.completed)))\n  }\n\n  return (\n    <Contex.Provider value={{ removeTodo }}>\n      <div className=\"wrapper\">\n        <h1>TODOList</h1>\n        <React.Suspense fallback={<p>Loading...</p>}>\n          <Panel onCreate={addTodo} reorder={reorder} />\n        </React.Suspense>\n        {loading ? <Loader /> : todos.length ?\n          (<TodoList todos={todos} completeTask={completeTask} />) : (<p>No todos!</p>)}\n      </div>\n    </Contex.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}